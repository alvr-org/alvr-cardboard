apply plugin: 'com.android.application'

android {
    namespace 'com.google.cardboard'
    buildToolsVersion = "33.0.0"
    compileSdkVersion 33
    ndkVersion "25.1.8937393"
    defaultConfig {
        applicationId "alvr.client.cardboard"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1
        versionName "19.0.0"
        externalNativeBuild.cmake {
            cppFlags "-std=c++17 -fexceptions -frtti"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.debug
            ndk {
                abiFilters "arm64-v8a"
            }
        }
        debug {
            jniDebuggable = true
            ndk {
                abiFilters "arm64-v8a"
            }
        }
    }
    externalNativeBuild.cmake {
        path "CMakeLists.txt"
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ["libraries/jni", "../ALVR/build/alvr_client_core"]
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    flavorDimensions "package"
    productFlavors {
        Stable {
            dimension "package"
        }
        Nightly {
            dimension "package"
            applicationIdSuffix ".nightly"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'com.google.protobuf:protobuf-javalite:3.19.4'
    implementation 'com.google.cardboard.sdk:cardboard-sdk:1.17.0@aar'
}

// The dependencies for NDK builds live inside the .aar files so they need to
// be extracted before NDK targets can link against.
task extractNdk(type: Copy)  {
    copy {
        from zipTree("../cardboard/cardboard-sdk.aar")
        into "libraries/"
        include "jni/**/libGfxPluginCardboard.so"
    }
}

task deleteNdk(type: Delete) {
    delete "libraries/"
}

build.dependsOn(extractNdk)
clean.dependsOn(deleteNdk)

task buildClientLib {
    doLast {
        exec {
            workingDir '../ALVR'
            commandLine 'cargo', 'xtask', 'build-client-lib', '--release'
        }
    }
}
preBuild.dependsOn(buildClientLib)
